security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        App\Entity\User: 'auto'
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
        app_user_provider:
            entity:
                class: App\Entity\User  # сущность для авторизации
                property: login # свойство сущности, по которому будет происходить идентификация
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
#            provider: users_in_memory
            provider: app_user_provider
            # pattern: ^/admin # запретить переходить на url admin не авторизованным пользователям
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds
                path: /admin
                httponly: false # разрешаем обращение к серваку из под java script
            json_login:
                login_path: api_login
                check_path: api_login # api_login is a route we will create below
                # что ожидается в теле json:
                username_path: login # идентификатор пользователя
                password_path: password # пароль прользователя (password по умолчанию)

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS } # публичный доступ (зарезервированная роль)
        - { path: ^/api/registration, roles: PUBLIC_ACCESS } # только админ
        - { path: ^/api/admin, roles: ROLE_ADMIN } # только админ
        - { path: ^/hello, roles: ROLE_USER } # только админ
        - { path: ^/api/user, roles: ROLE_USER } # пользователь

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
